Exercise 2:

A:
  AdaGrad dynamically adjusts the learning rate.

B:
  Task 1:
    Hyperparameters:
      learning_rate=0.005,
      steps=5000,
      batch_size=100,
      hidden_units=[10, 5, 3],
    Performance:
      Final RMSE (on training data):   66.55
      Final RMSE (on validation data): 63.90

  Task 2:
    Hyperparameters Adam:
      learning_rate=0.08,
      steps=5000,
      batch_size=100,
      hidden_units=[10, 5, 3],

    Hyperparameters Adam:
      learning_rate=0.01,
      steps=5000,
      batch_size=100,
      hidden_units=[10, 5, 3],

    Performance Ada:
      Final RMSE (on training data):   67.53
      Final RMSE (on validation data): 64.91
    Performance Adam:
      Final RMSE (on training data):   66.38
      Final RMSE (on validation data): 63.59

  Task3:
    normalization:
        processed_features["households"] = z_score_normalize(examples_dataframe["households"])
    processed_features["median_income"] = z_score_normalize(examples_dataframe["median_income"])
    processed_features["total_bedrooms"] = z_score_normalize(examples_dataframe["total_bedrooms"])

    processed_features["latitude"] = linear_scale(examples_dataframe["latitude"])
    processed_features["longitude"] = linear_scale(examples_dataframe["longitude"])
    processed_features["housing_median_age"] = linear_scale(examples_dataframe["housing_median_age"])

    processed_features["population"] = linear_scale(clip(examples_dataframe["population"], 0, 5000))
    processed_features["rooms_per_person"] = linear_scale(clip(examples_dataframe["rooms_per_person"], 0, 5))
    processed_features["total_rooms"] = linear_scale(clip(examples_dataframe["total_rooms"], 0, 10000))

  Hyperparameters:
    learning_rate=0.005,
    steps=5000,
    batch_size=100,
    hidden_units=[10, 5, 3],

  Performance:
    Final RMSE (on training data):   63.27
    Final RMSE (on validation data): 61.50